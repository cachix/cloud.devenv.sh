{-
   utoipa-axum
   Utoipa's axum bindings for seamless integration for the two

   The version of the OpenAPI document: 0.2.0
   Contact: juha7kukkonen@gmail.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( AnyType
    , anyTypeDecoder
    , Account
    , Commit
    , CompletionStatus(..), completionStatusVariants
    , FrontendConfig
    , GitHubCommit
    , Job
    , JobGitHub
    , JobResponse
    , JobStatus(..)
    , JobStatusOneOf(..), jobStatusOneOfVariants
    , JobStatusOneOf1(..), jobStatusOneOf1Variants
    , JobStatusOneOf2
    , OwnerWithRepos
    , Platform(..), platformVariants
    , RepoInfo
    , RepoJobs
    , encodeAccount
    , encodeCommit
    , encodeCompletionStatus
    , encodeFrontendConfig
    , encodeGitHubCommit
    , encodeJob
    , encodeJobGitHub
    , encodeJobResponse
    , encodeJobStatus
    , encodeJobStatusOneOf
    , encodeJobStatusOneOf1
    , encodeJobStatusOneOf2
    , encodeOwnerWithRepos
    , encodePlatform
    , encodeRepoInfo
    , encodeRepoJobs
    , stringFromCompletionStatus
    , stringFromJobStatusOneOf
    , stringFromJobStatusOneOf1
    , stringFromPlatform
    , accountDecoder
    , commitDecoder
    , completionStatusDecoder
    , frontendConfigDecoder
    , gitHubCommitDecoder
    , jobDecoder
    , jobGitHubDecoder
    , jobResponseDecoder
    , jobStatusDecoder
    , jobStatusOneOfDecoder
    , jobStatusOneOf1Decoder
    , jobStatusOneOf2Decoder
    , ownerWithReposDecoder
    , platformDecoder
    , repoInfoDecoder
    , repoJobsDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode
import Uuid exposing (Uuid)


-- MODEL


type alias Account =
    { id : Uuid
    }


type alias Commit =
    { author : String
    , jobs : List JobResponse
    , message : String
    , owner : String
    , ref : String
    , repo : String
    , rev : String
    }


type CompletionStatus
    = CompletionStatusFailed
    | CompletionStatusSuccess
    | CompletionStatusCancelled
    | CompletionStatusTimedOut
    | CompletionStatusSkipped


completionStatusVariants : List CompletionStatus
completionStatusVariants =
    [ CompletionStatusFailed
    , CompletionStatusSuccess
    , CompletionStatusCancelled
    , CompletionStatusTimedOut
    , CompletionStatusSkipped
    ]


type alias FrontendConfig =
    { githubAppName : String
    }


type alias GitHubCommit =
    { author : String
    , id : Uuid
    , message : String
    , ref : String
    , repoId : Int
    , rev : String
    }


type alias Job =
    { cpus : Int
    , createdAt : Posix
    , finishedAt : Maybe Posix
    , id : Uuid
    , memoryMb : Int
    , platform : Platform
    , previousJobId : Maybe Uuid
    , retriedJobId : Maybe Uuid
    , runnerId : Maybe Uuid
    , startedAt : Maybe Posix
    , status : JobStatus
    }


type alias JobGitHub =
    { checkRunId : Int
    , commitId : Uuid
    , jobId : Uuid
    }


type alias JobResponse =
    { commit : GitHubCommit
    , github : JobGitHub
    , job : Job
    , logUrl : String
    }


type JobStatus
    = JobStatusJobStatusOneOf JobStatusOneOf
    | JobStatusJobStatusOneOf1 JobStatusOneOf1
    | JobStatusJobStatusOneOf2 JobStatusOneOf2



type JobStatusOneOf
    = JobStatusOneOfQueued


jobStatusOneOfVariants : List JobStatusOneOf
jobStatusOneOfVariants =
    [ JobStatusOneOfQueued
    ]


type JobStatusOneOf1
    = JobStatusOneOf1Running


jobStatusOneOf1Variants : List JobStatusOneOf1
jobStatusOneOf1Variants =
    [ JobStatusOneOf1Running
    ]


type alias JobStatusOneOf2 =
    { complete : CompletionStatus
    }


type alias OwnerWithRepos =
    { id : Int
    , isUser : Bool
    , login : String
    , name : String
    , repos : List RepoInfo
    }


type Platform
    = PlatformX8664Linux
    | PlatformAArch64Darwin


platformVariants : List Platform
platformVariants =
    [ PlatformX8664Linux
    , PlatformAArch64Darwin
    ]


type alias RepoInfo =
    { generatePr : Maybe String
    , id : Int
    , isPrivate : Bool
    , latestCommit : Maybe Commit
    , name : String
    }


type alias RepoJobs =
    { commits : List Commit
    , owner : String
    , repo : String
    }


-- ENCODER


encodeAccount : Account -> Json.Encode.Value
encodeAccount =
    encodeObject << encodeAccountPairs


encodeAccountWithTag : ( String, String ) -> Account -> Json.Encode.Value
encodeAccountWithTag (tagField, tag) model =
    encodeObject (encodeAccountPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAccountPairs : Account -> List EncodedField
encodeAccountPairs model =
    let
        pairs =
            [ encode "id" Uuid.encode model.id
            ]
    in
    pairs


encodeCommit : Commit -> Json.Encode.Value
encodeCommit =
    encodeObject << encodeCommitPairs


encodeCommitWithTag : ( String, String ) -> Commit -> Json.Encode.Value
encodeCommitWithTag (tagField, tag) model =
    encodeObject (encodeCommitPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCommitPairs : Commit -> List EncodedField
encodeCommitPairs model =
    let
        pairs =
            [ encode "author" Json.Encode.string model.author
            , encode "jobs" (Json.Encode.list encodeJobResponse) model.jobs
            , encode "message" Json.Encode.string model.message
            , encode "owner" Json.Encode.string model.owner
            , encode "ref" Json.Encode.string model.ref
            , encode "repo" Json.Encode.string model.repo
            , encode "rev" Json.Encode.string model.rev
            ]
    in
    pairs


stringFromCompletionStatus : CompletionStatus -> String
stringFromCompletionStatus model =
    case model of
        CompletionStatusFailed ->
            "Failed"

        CompletionStatusSuccess ->
            "Success"

        CompletionStatusCancelled ->
            "Cancelled"

        CompletionStatusTimedOut ->
            "TimedOut"

        CompletionStatusSkipped ->
            "Skipped"


encodeCompletionStatus : CompletionStatus -> Json.Encode.Value
encodeCompletionStatus =
    Json.Encode.string << stringFromCompletionStatus


encodeFrontendConfig : FrontendConfig -> Json.Encode.Value
encodeFrontendConfig =
    encodeObject << encodeFrontendConfigPairs


encodeFrontendConfigWithTag : ( String, String ) -> FrontendConfig -> Json.Encode.Value
encodeFrontendConfigWithTag (tagField, tag) model =
    encodeObject (encodeFrontendConfigPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFrontendConfigPairs : FrontendConfig -> List EncodedField
encodeFrontendConfigPairs model =
    let
        pairs =
            [ encode "github_app_name" Json.Encode.string model.githubAppName
            ]
    in
    pairs


encodeGitHubCommit : GitHubCommit -> Json.Encode.Value
encodeGitHubCommit =
    encodeObject << encodeGitHubCommitPairs


encodeGitHubCommitWithTag : ( String, String ) -> GitHubCommit -> Json.Encode.Value
encodeGitHubCommitWithTag (tagField, tag) model =
    encodeObject (encodeGitHubCommitPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGitHubCommitPairs : GitHubCommit -> List EncodedField
encodeGitHubCommitPairs model =
    let
        pairs =
            [ encode "author" Json.Encode.string model.author
            , encode "id" Uuid.encode model.id
            , encode "message" Json.Encode.string model.message
            , encode "ref" Json.Encode.string model.ref
            , encode "repo_id" Json.Encode.int model.repoId
            , encode "rev" Json.Encode.string model.rev
            ]
    in
    pairs


encodeJob : Job -> Json.Encode.Value
encodeJob =
    encodeObject << encodeJobPairs


encodeJobWithTag : ( String, String ) -> Job -> Json.Encode.Value
encodeJobWithTag (tagField, tag) model =
    encodeObject (encodeJobPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJobPairs : Job -> List EncodedField
encodeJobPairs model =
    let
        pairs =
            [ encode "cpus" Json.Encode.int model.cpus
            , encode "created_at" Api.Time.encodeDateTime model.createdAt
            , maybeEncodeNullable "finished_at" Api.Time.encodeDateTime model.finishedAt
            , encode "id" Uuid.encode model.id
            , encode "memory_mb" Json.Encode.int model.memoryMb
            , encode "platform" encodePlatform model.platform
            , maybeEncodeNullable "previous_job_id" Uuid.encode model.previousJobId
            , maybeEncodeNullable "retried_job_id" Uuid.encode model.retriedJobId
            , maybeEncodeNullable "runner_id" Uuid.encode model.runnerId
            , maybeEncodeNullable "started_at" Api.Time.encodeDateTime model.startedAt
            , encode "status" encodeJobStatus model.status
            ]
    in
    pairs


encodeJobGitHub : JobGitHub -> Json.Encode.Value
encodeJobGitHub =
    encodeObject << encodeJobGitHubPairs


encodeJobGitHubWithTag : ( String, String ) -> JobGitHub -> Json.Encode.Value
encodeJobGitHubWithTag (tagField, tag) model =
    encodeObject (encodeJobGitHubPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJobGitHubPairs : JobGitHub -> List EncodedField
encodeJobGitHubPairs model =
    let
        pairs =
            [ encode "check_run_id" Json.Encode.int model.checkRunId
            , encode "commit_id" Uuid.encode model.commitId
            , encode "job_id" Uuid.encode model.jobId
            ]
    in
    pairs


encodeJobResponse : JobResponse -> Json.Encode.Value
encodeJobResponse =
    encodeObject << encodeJobResponsePairs


encodeJobResponseWithTag : ( String, String ) -> JobResponse -> Json.Encode.Value
encodeJobResponseWithTag (tagField, tag) model =
    encodeObject (encodeJobResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJobResponsePairs : JobResponse -> List EncodedField
encodeJobResponsePairs model =
    let
        pairs =
            [ encode "commit" encodeGitHubCommit model.commit
            , encode "github" encodeJobGitHub model.github
            , encode "job" encodeJob model.job
            , encode "log_url" Json.Encode.string model.logUrl
            ]
    in
    pairs


encodeJobStatus : JobStatus -> Json.Encode.Value
encodeJobStatus model =
    case model of
        JobStatusJobStatusOneOf subModel ->
            encodeJobStatusOneOf subModel


        JobStatusJobStatusOneOf1 subModel ->
            encodeJobStatusOneOf1 subModel


        JobStatusJobStatusOneOf2 subModel ->
            encodeJobStatusOneOf2 subModel




stringFromJobStatusOneOf : JobStatusOneOf -> String
stringFromJobStatusOneOf model =
    case model of
        JobStatusOneOfQueued ->
            "Queued"


encodeJobStatusOneOf : JobStatusOneOf -> Json.Encode.Value
encodeJobStatusOneOf =
    Json.Encode.string << stringFromJobStatusOneOf


stringFromJobStatusOneOf1 : JobStatusOneOf1 -> String
stringFromJobStatusOneOf1 model =
    case model of
        JobStatusOneOf1Running ->
            "Running"


encodeJobStatusOneOf1 : JobStatusOneOf1 -> Json.Encode.Value
encodeJobStatusOneOf1 =
    Json.Encode.string << stringFromJobStatusOneOf1


encodeJobStatusOneOf2 : JobStatusOneOf2 -> Json.Encode.Value
encodeJobStatusOneOf2 =
    encodeObject << encodeJobStatusOneOf2Pairs


encodeJobStatusOneOf2WithTag : ( String, String ) -> JobStatusOneOf2 -> Json.Encode.Value
encodeJobStatusOneOf2WithTag (tagField, tag) model =
    encodeObject (encodeJobStatusOneOf2Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJobStatusOneOf2Pairs : JobStatusOneOf2 -> List EncodedField
encodeJobStatusOneOf2Pairs model =
    let
        pairs =
            [ encode "Complete" encodeCompletionStatus model.complete
            ]
    in
    pairs


encodeOwnerWithRepos : OwnerWithRepos -> Json.Encode.Value
encodeOwnerWithRepos =
    encodeObject << encodeOwnerWithReposPairs


encodeOwnerWithReposWithTag : ( String, String ) -> OwnerWithRepos -> Json.Encode.Value
encodeOwnerWithReposWithTag (tagField, tag) model =
    encodeObject (encodeOwnerWithReposPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOwnerWithReposPairs : OwnerWithRepos -> List EncodedField
encodeOwnerWithReposPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "is_user" Json.Encode.bool model.isUser
            , encode "login" Json.Encode.string model.login
            , encode "name" Json.Encode.string model.name
            , encode "repos" (Json.Encode.list encodeRepoInfo) model.repos
            ]
    in
    pairs


stringFromPlatform : Platform -> String
stringFromPlatform model =
    case model of
        PlatformX8664Linux ->
            "X86_64Linux"

        PlatformAArch64Darwin ->
            "AArch64Darwin"


encodePlatform : Platform -> Json.Encode.Value
encodePlatform =
    Json.Encode.string << stringFromPlatform


encodeRepoInfo : RepoInfo -> Json.Encode.Value
encodeRepoInfo =
    encodeObject << encodeRepoInfoPairs


encodeRepoInfoWithTag : ( String, String ) -> RepoInfo -> Json.Encode.Value
encodeRepoInfoWithTag (tagField, tag) model =
    encodeObject (encodeRepoInfoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRepoInfoPairs : RepoInfo -> List EncodedField
encodeRepoInfoPairs model =
    let
        pairs =
            [ maybeEncodeNullable "generate_pr" Json.Encode.string model.generatePr
            , encode "id" Json.Encode.int model.id
            , encode "is_private" Json.Encode.bool model.isPrivate
            , maybeEncodeNullable "latest_commit" encodeCommit model.latestCommit
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeRepoJobs : RepoJobs -> Json.Encode.Value
encodeRepoJobs =
    encodeObject << encodeRepoJobsPairs


encodeRepoJobsWithTag : ( String, String ) -> RepoJobs -> Json.Encode.Value
encodeRepoJobsWithTag (tagField, tag) model =
    encodeObject (encodeRepoJobsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRepoJobsPairs : RepoJobs -> List EncodedField
encodeRepoJobsPairs model =
    let
        pairs =
            [ encode "commits" (Json.Encode.list encodeCommit) model.commits
            , encode "owner" Json.Encode.string model.owner
            , encode "repo" Json.Encode.string model.repo
            ]
    in
    pairs


-- DECODER


accountDecoder : Json.Decode.Decoder Account
accountDecoder =
    Json.Decode.succeed Account
        |> decode "id" Uuid.decoder 


commitDecoder : Json.Decode.Decoder Commit
commitDecoder =
    Json.Decode.succeed Commit
        |> decode "author" Json.Decode.string 
        |> decode "jobs" (Json.Decode.list jobResponseDecoder) 
        |> decode "message" Json.Decode.string 
        |> decode "owner" Json.Decode.string 
        |> decode "ref" Json.Decode.string 
        |> decode "repo" Json.Decode.string 
        |> decode "rev" Json.Decode.string 


completionStatusDecoder : Json.Decode.Decoder CompletionStatus
completionStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "Failed" ->
                        Json.Decode.succeed CompletionStatusFailed

                    "Success" ->
                        Json.Decode.succeed CompletionStatusSuccess

                    "Cancelled" ->
                        Json.Decode.succeed CompletionStatusCancelled

                    "TimedOut" ->
                        Json.Decode.succeed CompletionStatusTimedOut

                    "Skipped" ->
                        Json.Decode.succeed CompletionStatusSkipped

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


frontendConfigDecoder : Json.Decode.Decoder FrontendConfig
frontendConfigDecoder =
    Json.Decode.succeed FrontendConfig
        |> decode "github_app_name" Json.Decode.string 


gitHubCommitDecoder : Json.Decode.Decoder GitHubCommit
gitHubCommitDecoder =
    Json.Decode.succeed GitHubCommit
        |> decode "author" Json.Decode.string 
        |> decode "id" Uuid.decoder 
        |> decode "message" Json.Decode.string 
        |> decode "ref" Json.Decode.string 
        |> decode "repo_id" Json.Decode.int 
        |> decode "rev" Json.Decode.string 


jobDecoder : Json.Decode.Decoder Job
jobDecoder =
    Json.Decode.succeed Job
        |> decode "cpus" Json.Decode.int 
        |> decode "created_at" Api.Time.dateTimeDecoder 
        |> maybeDecodeNullable "finished_at" Api.Time.dateTimeDecoder Nothing
        |> decode "id" Uuid.decoder 
        |> decode "memory_mb" Json.Decode.int 
        |> decode "platform" platformDecoder 
        |> maybeDecodeNullable "previous_job_id" Uuid.decoder Nothing
        |> maybeDecodeNullable "retried_job_id" Uuid.decoder Nothing
        |> maybeDecodeNullable "runner_id" Uuid.decoder Nothing
        |> maybeDecodeNullable "started_at" Api.Time.dateTimeDecoder Nothing
        |> decode "status" jobStatusDecoder 


jobGitHubDecoder : Json.Decode.Decoder JobGitHub
jobGitHubDecoder =
    Json.Decode.succeed JobGitHub
        |> decode "check_run_id" Json.Decode.int 
        |> decode "commit_id" Uuid.decoder 
        |> decode "job_id" Uuid.decoder 


jobResponseDecoder : Json.Decode.Decoder JobResponse
jobResponseDecoder =
    Json.Decode.succeed JobResponse
        |> decode "commit" gitHubCommitDecoder 
        |> decode "github" jobGitHubDecoder 
        |> decode "job" jobDecoder 
        |> decode "log_url" Json.Decode.string 


jobStatusDecoder : Json.Decode.Decoder JobStatus
jobStatusDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map JobStatusJobStatusOneOf jobStatusOneOfDecoder
        , Json.Decode.map JobStatusJobStatusOneOf1 jobStatusOneOf1Decoder
        , Json.Decode.map JobStatusJobStatusOneOf2 jobStatusOneOf2Decoder
        ]



jobStatusOneOfDecoder : Json.Decode.Decoder JobStatusOneOf
jobStatusOneOfDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "Queued" ->
                        Json.Decode.succeed JobStatusOneOfQueued

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


jobStatusOneOf1Decoder : Json.Decode.Decoder JobStatusOneOf1
jobStatusOneOf1Decoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "Running" ->
                        Json.Decode.succeed JobStatusOneOf1Running

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


jobStatusOneOf2Decoder : Json.Decode.Decoder JobStatusOneOf2
jobStatusOneOf2Decoder =
    Json.Decode.succeed JobStatusOneOf2
        |> decode "Complete" completionStatusDecoder 


ownerWithReposDecoder : Json.Decode.Decoder OwnerWithRepos
ownerWithReposDecoder =
    Json.Decode.succeed OwnerWithRepos
        |> decode "id" Json.Decode.int 
        |> decode "is_user" Json.Decode.bool 
        |> decode "login" Json.Decode.string 
        |> decode "name" Json.Decode.string 
        |> decode "repos" (Json.Decode.list repoInfoDecoder) 


platformDecoder : Json.Decode.Decoder Platform
platformDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "X86_64Linux" ->
                        Json.Decode.succeed PlatformX8664Linux

                    "AArch64Darwin" ->
                        Json.Decode.succeed PlatformAArch64Darwin

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


repoInfoDecoder : Json.Decode.Decoder RepoInfo
repoInfoDecoder =
    Json.Decode.succeed RepoInfo
        |> maybeDecodeNullable "generate_pr" Json.Decode.string Nothing
        |> decode "id" Json.Decode.int 
        |> decode "is_private" Json.Decode.bool 
        |> maybeDecodeNullable "latest_commit" commitDecoder Nothing
        |> decode "name" Json.Decode.string 


repoJobsDecoder : Json.Decode.Decoder RepoJobs
repoJobsDecoder =
    Json.Decode.succeed RepoJobs
        |> decode "commits" (Json.Decode.list commitDecoder) 
        |> decode "owner" Json.Decode.string 
        |> decode "repo" Json.Decode.string 




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f

type alias AnyType = ()

anyTypeDecoder : Json.Decode.Decoder AnyType
anyTypeDecoder = Json.Decode.succeed ()

From 8cf12e6d98e9c80c2b580076f94f4baa3a5e8ef6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Domen=20Ko=C5=BEar?= <domen@cachix.org>
Date: Fri, 5 Sep 2025 01:27:58 +0200
Subject: [PATCH] init: skip creating role / database if it exists

---
 cmd/initialise/verify_database.go | 28 +++++++++++++++++++++++++
 cmd/initialise/verify_user.go     | 35 +++++++++++++++++++++++++++++--
 2 files changed, 61 insertions(+), 2 deletions(-)

diff --git a/cmd/initialise/verify_database.go b/cmd/initialise/verify_database.go
index 3e3bea9ef..483bbae03 100644
--- a/cmd/initialise/verify_database.go
+++ b/cmd/initialise/verify_database.go
@@ -2,6 +2,7 @@ package initialise
 
 import (
 	"context"
+	"database/sql"
 	_ "embed"
 	"fmt"
 
@@ -39,6 +40,33 @@ func VerifyDatabase(databaseName string) func(context.Context, *database.DB) err
 	return func(ctx context.Context, db *database.DB) error {
 		logging.WithFields("database", databaseName).Info("verify database")
 
+		// Check if database already exists first
+		exists, err := databaseExists(ctx, db, databaseName)
+		if err != nil {
+			return fmt.Errorf("failed to check if database exists: %w", err)
+		}
+
+		if exists {
+			logging.WithFields("database", databaseName).Info("database already exists, skipping creation")
+			return nil
+		}
+
+		// Proceed with database creation
 		return exec(ctx, db, fmt.Sprintf(databaseStmt, databaseName), []string{dbAlreadyExistsCode})
 	}
 }
+
+func databaseExists(ctx context.Context, db *database.DB, databaseName string) (bool, error) {
+	var exists int
+	err := db.QueryRowContext(ctx, func(row *sql.Row) error {
+		return row.Scan(&exists)
+	}, `SELECT 1 FROM pg_database WHERE datname = $1`, databaseName)
+	if err == sql.ErrNoRows {
+		return false, nil
+	}
+	if err != nil {
+		return false, err
+	}
+	
+	return true, nil
+}
diff --git a/cmd/initialise/verify_user.go b/cmd/initialise/verify_user.go
index 3adca93e5..c1b891bc8 100644
--- a/cmd/initialise/verify_user.go
+++ b/cmd/initialise/verify_user.go
@@ -2,6 +2,7 @@ package initialise
 
 import (
 	"context"
+	"database/sql"
 	_ "embed"
 	"fmt"
 
@@ -39,10 +40,40 @@ func VerifyUser(username, password string) func(context.Context, *database.DB) e
 	return func(ctx context.Context, db *database.DB) error {
 		logging.WithFields("username", username).Info("verify user")
 
+		// Check if user already exists first
+		exists, err := userExists(ctx, db, username)
+		if err != nil {
+			return fmt.Errorf("failed to check if user exists: %w", err)
+		}
+
+		if exists {
+			logging.WithFields("username", username).Info("user already exists, skipping creation")
+			return nil
+		}
+
+		// Proceed with user creation
+		stmt := createUserStmt
 		if password != "" {
-			createUserStmt += " WITH PASSWORD '" + password + "'"
+			stmt += " WITH PASSWORD '" + password + "'"
 		}
 
-		return exec(ctx, db, fmt.Sprintf(createUserStmt, username), []string{roleAlreadyExistsCode})
+		return exec(ctx, db, fmt.Sprintf(stmt, username), []string{roleAlreadyExistsCode})
+	}
+}
+
+func userExists(ctx context.Context, db *database.DB, username string) (bool, error) {
+	query := `SELECT 1 FROM pg_user WHERE usename = $1`
+	
+	var exists int
+	err := db.QueryRowContext(ctx, func(row *sql.Row) error {
+		return row.Scan(&exists)
+	}, query, username)
+	if err == sql.ErrNoRows {
+		return false, nil
+	}
+	if err != nil {
+		return false, err
 	}
+	
+	return true, nil
 }
-- 
2.50.1

